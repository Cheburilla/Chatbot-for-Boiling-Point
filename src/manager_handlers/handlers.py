from datetime import datetime

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (CallbackQuery, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)

from keyboard.for_questions import get_keyboard
from manager_handlers.reply_dict import reply_dict
from utils.config_reader import config


def is_date(date: str):
    try:
        date = datetime.strptime(date, '%d.%m.%Y')
    except:
        return False
    return True


def is_time(time: str):
    try:
        date = datetime.strptime(time, '%H:%M')
    except:
        return False
    return True

def is_date_now(date: str):
    date = datetime.strptime(date, '%d.%m.%Y')
    if date < datetime.now():
        return False
    else:
        return True


class Form(StatesGroup):
    name = State()
    hall = State()
    date = State()
    begin_time = State()
    end_time = State()
    phone = State()
    comments = State()
    event_name = State()


async def cmd_book(message: Message):
    await Form.name.set()
    await message.answer('–ù–∞ –∫–∞–∫–æ–µ –∏–º—è –±—É–¥–µ—Ç –±—Ä–æ–Ω—å\?')


async def process_name(message: Message, state: FSMContext):
    # Update state and data
    await Form.next()

    async with state.proxy() as data:
        data['name'] = message.text

    # Configure ReplyKeyboardMarkup
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–ë–æ–ª—å—à–æ–π –∑–∞–ª", "–ú–∞–ª—ã–π –∑–∞–ª")

    await message.answer("–í –∫–∞–∫–æ–º –∑–∞–ª–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\?", reply_markup=markup)

async def process_hall_invalid(message: Message):

    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ \"–ú–∞–ª—ã–π –∑–∞–ª\" –∏–ª–∏ \"–ë–æ–ª—å—à–æ–π –∑–∞–ª\"")


async def process_hall(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['hall'] = message.text

        # Remove keyboard
        markup = ReplyKeyboardRemove()

        await Form.next()
        calendar = config.calendar_link.get_secret_value()
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¢–æ—á–∫–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ —Å—Å—ã–ª–∫–µ: {calendar}", reply_markup=markup, parse_mode='HTML')

async def process_date_invalid(message: Message):

    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î\.–ú–ú\.–ì–ì–ì–ì")


async def process_date(message: Message, state: FSMContext):

    await Form.next()
    await state.update_data(date=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß\:–ú–ú")

async def process_beg_t_invalid(message: Message):

    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß\:–ú–ú")


async def process_beg_t(message: Message, state: FSMContext):

    await Form.next()
    await state.update_data(begin_time=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß\:–ú–ú")

async def process_end_t_invalid(message: Message):

    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß\:–ú–ú")


async def process_end_t(message: Message, state: FSMContext):

    await Form.next()
    await state.update_data(end_time=message.text)

    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\, —Å –≤–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüìû")

async def process_phone_invalid(message: Message):

    return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–æ—Ä–º–∞—Ç–µ *89–•–•–•–•–•–•–•* –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *\+7\(9–•–•\)–•–•–•\-–•–•\-–•–•*")


async def process_phone(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text

        await Form.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–ª–∞\, –Ω–∞–ø—Ä–∏–º–µ—Ä \"–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–µ–ª–µ–Ω–∏–µ –∑–∞–ª–∞ —Å—Ç–µ–ª–ª–∞–∂–∞–º–∏\"")


async def process_comments(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['comments'] = message.text

        await Form.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ *–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ* –∏ *–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ* –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


async def process_event_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_name'] = message.text

        await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Ä–ø–æ—Ä–∏—è—Ç–∏–µ –Ω–∞ –∏–º—è <b>{data['name']}</b>\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - <b>{data['hall']}</b>\n–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—Ç—è—Ç–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è <b>{data['date']}</b> —Å <b>{data['begin_time']}</b> –¥–æ <b>{data['end_time']}</b>\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - <b>{data['phone']}</b>\n–í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–ª–∞: <b>{data['comments']}</b>\n–ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - <b>{data['event_name']}</b>\n\n–ï—Å–ª–∏ –í—ã —É–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¢–æ—á–∫–∏",
                             parse_mode='HTML')

    # Finish conversation
    await state.finish()
    await message.answer("–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã\, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ Leader\-ID\?", reply_markup=get_keyboard(['reg_yes', 'user'], '–ù–µ –∑–Ω–∞—é', '–ó–Ω–∞—é'))


async def cmd_start(message: Message):
    await message.answer_photo('https://sun9-52.userapi.com/impg/RiX6_0PL_ni4KGaTPfNCi-MFWT18jfT7L62Ytg/EoFk_1CY7ss.jpg?size=1080x1080&quality=95&sign=f2768ff45453aecfad743d2730ba6afe&type=album')
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\!\n\n–ï—Å–ª–∏ –í—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã\, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å\, "
                         "–æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –≤–∞–º –ø–æ–º–æ–≥—É\!üòâ\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –í—ã –Ω–∞ Leader\-ID\?", reply_markup=get_keyboard(['yes', 'no'], "–î–∞", "–ù–µ—Ç"))


async def callback_handlers(callback: CallbackQuery):
    async def repl(call_data):
        for ans in reply_dict[call_data]:
            if len(ans) != 1:
                if ans[1] != None:
                    await callback.message.answer(ans[0], reply_markup=get_keyboard(*ans[1]))

                elif ans[0] != None:
                    await callback.message.answer(ans[0])

                if ans[2] != None:
                    await callback.message.answer_photo(ans[2])

            else:
                await repl(ans[0])
    await repl(callback.data)
